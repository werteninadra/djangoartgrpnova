# Generated by Django 5.2.7 on 2025-10-24 21:14

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalogue', '0005_add_new_fields'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArtworkRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField(help_text='Recommendation score (0-1)')),
                ('algorithm', models.CharField(help_text='Algorithm used for recommendation', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('reason', models.TextField(blank=True, help_text='Why this artwork was recommended')),
                ('oeuvre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='catalogue.oeuvre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='catalogue.customuser')),
            ],
            options={
                'ordering': ['-score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ArtworkSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='Similarity score (0-1)')),
                ('algorithm', models.CharField(help_text='Algorithm used to calculate similarity', max_length=100)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('similarity_type', models.CharField(choices=[('visual', 'Visual Similarity'), ('content', 'Content Similarity'), ('style', 'Style Similarity'), ('theme', 'Theme Similarity'), ('metadata', 'Metadata Similarity')], max_length=50)),
                ('features', models.JSONField(blank=True, default=dict, help_text='Feature vectors used for similarity calculation')),
                ('oeuvre1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_artworks_from', to='catalogue.oeuvre')),
                ('oeuvre2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_artworks_to', to='catalogue.oeuvre')),
            ],
            options={
                'ordering': ['-similarity_score'],
            },
        ),
        migrations.CreateModel(
            name='RecommendationEngine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('algorithm', models.CharField(max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('parameters', models.JSONField(blank=True, default=dict, help_text='Algorithm parameters')),
                ('last_trained', models.DateTimeField(blank=True, null=True)),
                ('performance_metrics', models.JSONField(blank=True, default=dict, help_text='Accuracy, precision, recall, etc.')),
                ('description', models.TextField(blank=True)),
                ('target_users', models.ManyToManyField(blank=True, related_name='targeted_by_engines', to='catalogue.customuser')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserBehavior',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('view', 'View'), ('like', 'Like'), ('favorite', 'Favorite'), ('share', 'Share'), ('comment', 'Comment'), ('purchase', 'Purchase'), ('download', 'Download')], max_length=50)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('duration', models.IntegerField(default=0, help_text='Time spent viewing in seconds')),
                ('rating', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('context', models.JSONField(blank=True, default=dict, help_text='Additional context like search terms, referral source')),
                ('oeuvre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_behaviors', to='catalogue.oeuvre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='behaviors', to='catalogue.customuser')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_score', models.FloatField(help_text='Similarity score (0-1)')),
                ('algorithm', models.CharField(help_text='Algorithm used to calculate similarity', max_length=100)),
                ('calculated_at', models.DateTimeField(auto_now_add=True)),
                ('common_interactions', models.IntegerField(default=0, help_text='Number of common artworks interacted with')),
                ('features', models.JSONField(blank=True, default=dict, help_text='Feature vectors used for similarity calculation')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_users_from', to='catalogue.customuser')),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similar_users_to', to='catalogue.customuser')),
            ],
            options={
                'ordering': ['-similarity_score'],
            },
        ),
        migrations.AddIndex(
            model_name='userbehavior',
            index=models.Index(fields=['user', 'oeuvre', 'interaction_type', 'timestamp'], name='ai_userbeh_user_id_4b8b8_idx'),
        ),
        migrations.AddIndex(
            model_name='artworkrecommendation',
            index=models.Index(fields=['user', 'oeuvre', 'algorithm'], name='ai_artworkr_user_id_4b8b8_idx'),
        ),
        migrations.AddIndex(
            model_name='usersimilarity',
            index=models.Index(fields=['user1', 'user2', 'algorithm'], name='ai_usersimi_user1_i_4b8b8_idx'),
        ),
        migrations.AddIndex(
            model_name='artworksimilarity',
            index=models.Index(fields=['oeuvre1', 'oeuvre2', 'algorithm', 'similarity_type'], name='ai_artworksi_oeuvre1_4b8b8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userbehavior',
            unique_together={('user', 'oeuvre', 'interaction_type', 'timestamp')},
        ),
        migrations.AlterUniqueTogether(
            name='usersimilarity',
            unique_together={('user1', 'user2', 'algorithm')},
        ),
        migrations.AlterUniqueTogether(
            name='artworksimilarity',
            unique_together={('oeuvre1', 'oeuvre2', 'algorithm', 'similarity_type')},
        ),
        migrations.AlterUniqueTogether(
            name='artworkrecommendation',
            unique_together={('user', 'oeuvre', 'algorithm')},
        ),
    ]
